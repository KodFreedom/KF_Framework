//--------------------------------------------------------------------------------
//  エネミーコントローラ
//　enemy controller.h
//  Author : Xu Wenjie
//--------------------------------------------------------------------------------
#pragma once
#include "actor_controller.h"

//--------------------------------------------------------------------------------
//  前方宣言
//--------------------------------------------------------------------------------
class EnemyState;

//--------------------------------------------------------------------------------
//  クラス宣言
//--------------------------------------------------------------------------------
class EnemyController : public ActorController
{
public:
    //--------------------------------------------------------------------------------
    //  constructors for singleton
    //--------------------------------------------------------------------------------
    EnemyController(GameObject& owner, Rigidbody3D& rigidbody, Animator& animator);
    ~EnemyController() {}

    //--------------------------------------------------------------------------------
    //  初期化処理
    //--------------------------------------------------------------------------------
    bool Init(void) override;

    //--------------------------------------------------------------------------------
    //  終了処理
    //--------------------------------------------------------------------------------
    void Uninit(void) override;

    //--------------------------------------------------------------------------------
    //  更新処理
    //--------------------------------------------------------------------------------
    void Update(void) override;

    //--------------------------------------------------------------------------------
    //  後更新処理
    //--------------------------------------------------------------------------------
    void LateUpdate(void) override;

    //--------------------------------------------------------------------------------
    //  コライダートリガーの時呼ばれる
    //--------------------------------------------------------------------------------
    void OnTrigger(Collider& self, Collider& other) override;

    //--------------------------------------------------------------------------------
    //  コライダー衝突の時呼ばれる
    //--------------------------------------------------------------------------------
    void OnCollision(CollisionInfo& info) override;

    //--------------------------------------------------------------------------------
    //  ステートの変換
    //--------------------------------------------------------------------------------
    void Change(EnemyState* state);

    //--------------------------------------------------------------------------------
    //  ダメージ受けた処理
    //--------------------------------------------------------------------------------
    void Hit(const float& damage) override;

    //--------------------------------------------------------------------------------
    //  セッター
    //--------------------------------------------------------------------------------
    void SetTarget(GameObject* target) { target_ = target; }
    void SetNextPosition(const Vector3& position) { next_position_ = position; }
    void SetWarningRange(const float& value) { warning_range_ = value; }
    void SetPatrolRange(const float& value) { patrol_range_ = value; }

    //--------------------------------------------------------------------------------
    //  ゲッター
    //--------------------------------------------------------------------------------
    const String&  GetCurrentStateName(void) const override;
    const auto&    GetTarget(void) const { return target_; }
    const float&   GetWarningRange(void) const { return warning_range_; }
    const float&   GetPatrolRange(void) const { return patrol_range_; }
    const Vector3& GetNextPosition(void) const { return next_position_; }
    const Vector3& GetBornPosition(void) const { return born_position_; }

private:
    //--------------------------------------------------------------------------------
    //  変数定義
    //--------------------------------------------------------------------------------
    EnemyState* current_state_;
    GameObject* target_;
    float       warning_range_;
    float       patrol_range_;
    Vector3     next_position_;
    Vector3     born_position_;
};