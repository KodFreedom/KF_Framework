//--------------------------------------------------------------------------------
//
//　gameObjManager.cpp
//	Author : Xu Wenjie
//	Date   : 2017-5-10
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
//  インクルードファイル
//--------------------------------------------------------------------------------
#include "gameObjectManager.h"

//gameObject head files
#include "gameObject.h"
#include "gameObjectActor.h"

//--------------------------------------------------------------------------------
//  クラス
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//
//  Public
//
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//  コンストラクタ
//--------------------------------------------------------------------------------
CGameObjectManager::CGameObjectManager()
{
	for (auto& list : m_alistGameObj){ list.clear(); }
}

//--------------------------------------------------------------------------------
//  リリース処理
//--------------------------------------------------------------------------------
void CGameObjectManager::ReleaseAll(void)
{
	for (auto& list : m_alistGameObj)
	{
		for (auto itr = list.begin(); itr != list.end();)
		{
			(*itr)->Uninit();
			delete (*itr);
			itr = list.erase(itr);
		}
	}
}

//--------------------------------------------------------------------------------
//  更新処理
//--------------------------------------------------------------------------------
void CGameObjectManager::UpdateAll(void)
{
	for (auto& list : m_alistGameObj)
	{
		for (auto itr = list.begin(); itr != list.end();)
		{//生きてないオブジェクトを削除
			if (!(*itr)->m_bAlive)
			{
				(*itr)->Uninit();
				delete (*itr);
				itr = list.erase(itr);
			}
			else { ++itr; }
		}
	}

	for (auto& list : m_alistGameObj)
	{
		for (auto pObj : list)
		{
			pObj->Update();
		}
	}
}

//--------------------------------------------------------------------------------
//  更新処理(描画直前)
//--------------------------------------------------------------------------------
void CGameObjectManager::LateUpdateAll(void)
{
	for (auto& list : m_alistGameObj)
	{
		for (auto pObj : list)
		{
			pObj->LateUpdate();
		}
	}
}

//--------------------------------------------------------------------------------
//  描画処理
//--------------------------------------------------------------------------------
void CGameObjectManager::DrawAll(void)
{
	for (auto& list : m_alistGameObj)
	{
		for (auto pObj : list)
		{
			pObj->Draw();
		}
	}
}

//--------------------------------------------------------------------------------
//  ゲームオブジェクトの確保
//--------------------------------------------------------------------------------
void CGameObjectManager::RegisterGameObj(const PRIORITY &pri, CGameObject *pGameObj)
{
	m_alistGameObj[pri].push_back(pGameObj);
}

//--------------------------------------------------------------------------------
//  ゲームオブジェクトの破棄
//--------------------------------------------------------------------------------
void CGameObjectManager::DeregisterGameObj(const PRIORITY &pri, CGameObject *pGameObj)
{
	if (!pGameObj) { return; }
	PRIORITY priCopy = pri;
	pGameObj->Uninit();
	delete pGameObj;
	m_alistGameObj[priCopy].remove(pGameObj);
}

//--------------------------------------------------------------------------------
//
//  Private
//
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//  初期化処理
//--------------------------------------------------------------------------------
void CGameObjectManager::init(void)
{
}

//--------------------------------------------------------------------------------
//  終了処理
//--------------------------------------------------------------------------------
void CGameObjectManager::uninit(void)
{
	ReleaseAll();
}