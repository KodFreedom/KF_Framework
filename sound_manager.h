//--------------------------------------------------------------------------------
//　sound_manager.h
//  manage the se,bgm's save, load
//  サウンド管理者
//  Author : 徐文杰(KodFreedom)
//--------------------------------------------------------------------------------
#pragma once
#include <XAudio2.h>
#include "common_setting.h"

//--------------------------------------------------------------------------------
//  列挙型定義
//--------------------------------------------------------------------------------
enum SoundLabel
{
    eGameBGM,
    eSoundMax,
};

//--------------------------------------------------------------------------------
//  サウンド管理者クラス
//--------------------------------------------------------------------------------
class SoundManager
{
public:
    //--------------------------------------------------------------------------------
    //  生成処理
    //  return : SoundManager*
    //--------------------------------------------------------------------------------
    static SoundManager* Create(void)
    {
        auto instance = MY_NEW SoundManager();
        instance->Init();
        return instance;
    }

    //--------------------------------------------------------------------------------
    //  破棄処理
    //--------------------------------------------------------------------------------
    void Release(void) 
    {
        Uninit();
        MY_DELETE this;
    }

    //--------------------------------------------------------------------------------
    //  指定したサウンドを鳴らす
    //  label : soundのラベル
    //--------------------------------------------------------------------------------
    void Play(const SoundLabel label);

    //--------------------------------------------------------------------------------
    //  指定したサウンドを止める
    //  label : soundのラベル
    //--------------------------------------------------------------------------------
    void Stop(const SoundLabel label);

    //--------------------------------------------------------------------------------
    //  指定したサウンドが終わってるかをチェック
    //  label : soundのラベル
    //--------------------------------------------------------------------------------
    bool IsOver(const SoundLabel label);

    //--------------------------------------------------------------------------------
    //  指定したサウンドがなってるかをチェック
    //  label : soundのラベル
    //--------------------------------------------------------------------------------
    bool IsPlaying(const SoundLabel label);

    //--------------------------------------------------------------------------------
    //  全てのサウンドを止まる
    //--------------------------------------------------------------------------------
    void StopAll(void);

private:
    //--------------------------------------------------------------------------------
    //　構造体定義
    //--------------------------------------------------------------------------------
    struct Paramater
    {
        String    file_path;
        int        count_loop;
    };

    //--------------------------------------------------------------------------------
    //  constructors and destructors
    //--------------------------------------------------------------------------------
    SoundManager() : instance_xaudio2_(nullptr), mastering_voice_(nullptr)
    {
        for (int count = 0; count < static_cast<int>(eSoundMax); ++count)
        {
            source_voices_[count] = nullptr;
            audio_datas_[count] = nullptr;
            audio_sizes_[count] = 0;
        }
    }
    SoundManager(const SoundManager& value) {}
    SoundManager& operator=(const SoundManager& value) {}
    ~SoundManager() {}

    //--------------------------------------------------------------------------------
    //  初期化処理
    //--------------------------------------------------------------------------------
    bool Init(void);

    //--------------------------------------------------------------------------------
    //  終了処理
    //--------------------------------------------------------------------------------
    void Uninit(void);

    //--------------------------------------------------------------------------------
    //  チャンクのチェック
    //--------------------------------------------------------------------------------
    bool CheckChunk(HANDLE file, DWORD format, DWORD& chunk_size, DWORD& chunk_data_position);

    //--------------------------------------------------------------------------------
    //  チャンクデータの読み込み
    //--------------------------------------------------------------------------------
    bool ReadChunkData(HANDLE file, void *buffer, DWORD buffer_size, DWORD buffer_offset);

    //--------------------------------------------------------------------------------
    //  変数定義
    //--------------------------------------------------------------------------------
    IXAudio2*                instance_xaudio2_;
    IXAudio2MasteringVoice*    mastering_voice_;
    IXAudio2SourceVoice*    source_voices_[eSoundMax];
    BYTE*                    audio_datas_[eSoundMax];
    DWORD                    audio_sizes_[eSoundMax];
    static Paramater         paramaters_[eSoundMax];
};