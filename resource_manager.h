//--------------------------------------------------------------------------------
//　resource_manager.h
//  リソース管理者
//  Author : 徐文杰(KodFreedom)
//--------------------------------------------------------------------------------
#pragma once
#include "common_setting.h"

//--------------------------------------------------------------------------------
//  リソース管理者クラス
//--------------------------------------------------------------------------------
class ResourceManager
{
    friend class Resources;

public:
    //--------------------------------------------------------------------------------
    //  破棄処理
    //--------------------------------------------------------------------------------
    void Release(void);

    //--------------------------------------------------------------------------------
    //  与えられた名前のリソースの利用開始
    //  すでにあるの場合ユーザーを1たす、ないの場合ファイルから読み込む
    //--------------------------------------------------------------------------------
    void Use(const String& resource_name);

    //--------------------------------------------------------------------------------
    //  与えられた名前のリソースの利用終了
    //  ユーザーが-1になる、0になった場合メモリから破棄する
    //--------------------------------------------------------------------------------
    void Disuse(const String& resource_name);

protected:
    //--------------------------------------------------------------------------------
    //  constructors and destructors
    //--------------------------------------------------------------------------------
    ResourceManager() {}
    ResourceManager(const ResourceManager& value) {}
    ResourceManager& operator=(const ResourceManager& value) {}
    virtual ~ResourceManager() {}

    //--------------------------------------------------------------------------------
    //  初期化処理
    //--------------------------------------------------------------------------------
    virtual void Init(void) {}

    //--------------------------------------------------------------------------------
    //  終了処理
    //--------------------------------------------------------------------------------
    virtual void Uninit(void) {}

    //--------------------------------------------------------------------------------
    //  マルチスレッド処理
    //--------------------------------------------------------------------------------
    void Run(void);

    //--------------------------------------------------------------------------------
    //  リソースの読込処理
    //--------------------------------------------------------------------------------
    virtual void LoadResource(void) = 0;

    //--------------------------------------------------------------------------------
    //  リソースのリリース処理
    //--------------------------------------------------------------------------------
    virtual void ReleaseResource(void) = 0;

    //--------------------------------------------------------------------------------
    //  変数定義
    //--------------------------------------------------------------------------------
    queue<String> load_tasks_;   // 読込時名前が必要なのでStringで保存
    queue<size_t> release_tasks_;// 破棄時Hash値だけで十分なのでsize_tで保存
};