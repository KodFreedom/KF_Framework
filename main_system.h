//--------------------------------------------------------------------------------
//　main_system.h
//	メインシステム
//	Author : 徐文杰(KodFreedom)
//--------------------------------------------------------------------------------
#pragma once

//--------------------------------------------------------------------------------
//  forward declaration / 前方宣言
//--------------------------------------------------------------------------------
class Mode;
class RenderSystem;
class RendererManager;
class Input;
class MaterialManager;
class CollisionSystem;
class PhysicsSystem;
class GameObjectManager;
class UISystem;
class SoundManager;
class FadeSystem;
class CameraManager;
class MotionManager;
class TextureManager;
class MeshManager;

#if defined(_DEBUG)
class DebugObserver;
#endif

//--------------------------------------------------------------------------------
//  メインシステムクラス
//--------------------------------------------------------------------------------
class MainSystem
{
public:
	//--------------------------------------------------------------------------------
	//  create the instance / 生成処理
	//	hinstance
	//	hwnd
	//	is_window_mode
	//	return：MainSystem*
	//--------------------------------------------------------------------------------
	static MainSystem* Create(HINSTANCE hinstance, HWND hwnd, BOOL is_window_mode);
	
	//--------------------------------------------------------------------------------
	//  破棄処理
	//--------------------------------------------------------------------------------
	static void Release(void);

	//--------------------------------------------------------------------------------
	//  return the instance of main system / インスタンスを返す
	//--------------------------------------------------------------------------------
	static auto Instance(void) { return instance_; }

	//--------------------------------------------------------------------------------
	//  更新処理
	//--------------------------------------------------------------------------------
	void Update(void);

	//--------------------------------------------------------------------------------
	//  後更新処理(描画の前)
	//--------------------------------------------------------------------------------
	void LateUpdate(void);

	//--------------------------------------------------------------------------------
	//  描画処理
	//--------------------------------------------------------------------------------
	void Render(void);

	//--------------------------------------------------------------------------------
	//  change the mode / モード切り替え処理
	//--------------------------------------------------------------------------------
	void Change(Mode* next_mode);

	//--------------------------------------------------------------------------------
	//  return the instances 
	//--------------------------------------------------------------------------------
	const auto GetRenderSystem(void) const { return render_system_; }

private:
	//--------------------------------------------------------------------------------
	//  constructors for singleton / シングルトンのコンストラクタ
	//--------------------------------------------------------------------------------
	MainSystem()
		: current_mode_(nullptr)
		, render_system_(nullptr) {}
	MainSystem(const MainSystem& value) {}
	MainSystem& operator=(const MainSystem& value) {}
	~MainSystem() {}

	//--------------------------------------------------------------------------------
	//  init the main system, return ture if is successed
	//  初期化処理
	//	hinstance
	//	hwnd
	//	is_window_mode
	//	return：bool
	//--------------------------------------------------------------------------------
	bool Init(HINSTANCE hinstance, HWND hwnd, BOOL is_window_mode);
	
	//--------------------------------------------------------------------------------
	//  終了処理
	//--------------------------------------------------------------------------------
	void Uninit(void);

	//--------------------------------------------------------------------------------
	//  今のモード
	//--------------------------------------------------------------------------------
	Mode* current_mode_;

	//--------------------------------------------------------------------------------
	//  レンダーシステム
	//--------------------------------------------------------------------------------
	RenderSystem* render_system_;

	//--------------------------------------------------------------------------------
	//  インスタンス
	//--------------------------------------------------------------------------------
	static MainSystem* instance_;
};