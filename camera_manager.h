//--------------------------------------------------------------------------------
//　camera_manager.h
//  manage the cameras
//	カメラ管理者
//	Author : 徐文杰(KodFreedom)
//--------------------------------------------------------------------------------
#pragma once
#include "common_setting.h"

//--------------------------------------------------------------------------------
//  前方宣言
//--------------------------------------------------------------------------------
class Camera;

//--------------------------------------------------------------------------------
//  カメラ管理者クラス
//--------------------------------------------------------------------------------
class CameraManager
{
public:
	//--------------------------------------------------------------------------------
	//  生成処理
	//  return : MaterialManager*
	//--------------------------------------------------------------------------------
	static CameraManager* Create(void)
	{
		auto instance = MY_NEW CameraManager;
		return instance;
	}

	//--------------------------------------------------------------------------------
	//  破棄処理
	//--------------------------------------------------------------------------------
	void Release(void) { Clear(); }

	//--------------------------------------------------------------------------------
	//  更新処理
	//--------------------------------------------------------------------------------
	void Update(void);

	//--------------------------------------------------------------------------------
	//  後更新処理
	//--------------------------------------------------------------------------------
	void LateUpdate(void);

	//--------------------------------------------------------------------------------
	//  全カメラのセット処理
	//--------------------------------------------------------------------------------
	void SetCamera(void);

	//--------------------------------------------------------------------------------
	//  クリア処理
	//--------------------------------------------------------------------------------
	void Clear(void);

	//--------------------------------------------------------------------------------
	//  登録処理
	//--------------------------------------------------------------------------------
	void Register(Camera* camera) { cameras_.push_back(camera); }

	//--------------------------------------------------------------------------------
	//  メインカメラとして登録
	//--------------------------------------------------------------------------------
	void RegisterAsMain(Camera* camera) { cameras_.push_front(camera); }

	//--------------------------------------------------------------------------------
	//  メインカメラの取得
	//--------------------------------------------------------------------------------
	auto GetMainCamera(void) const { return cameras_.front(); }

private:
	//--------------------------------------------------------------------------------
	//  constructors and destructors
	//--------------------------------------------------------------------------------
	CameraManager() {}
	CameraManager(const CameraManager& value) {}
	CameraManager& operator=(const CameraManager& value) {}
	~CameraManager() {}

	//--------------------------------------------------------------------------------
	//  変数定義
	//--------------------------------------------------------------------------------
	list<Camera*> cameras_;
};