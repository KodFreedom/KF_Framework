//--------------------------------------------------------------------------------
//	生き物コントローラ
//　ActorController.h
//	Author : Xu Wenjie
//--------------------------------------------------------------------------------
#pragma once
#include "main.h"
#include "behavior.h"
#include "actor_parameter.h"

//--------------------------------------------------------------------------------
//  前方宣言
//--------------------------------------------------------------------------------
class GameObject;
class ActorState;
class Animator;
class Rigidbody3D;

//--------------------------------------------------------------------------------
//  クラス宣言
//--------------------------------------------------------------------------------
class ActorController : public Behavior
{
public:
	//--------------------------------------------------------------------------------
	//  constructors for singleton
	//--------------------------------------------------------------------------------
	ActorController(GameObject& owner, const String& name, Rigidbody3D& rigidbody, Animator& animator);
	~ActorController() {}

	//--------------------------------------------------------------------------------
	//  初期化処理
	//--------------------------------------------------------------------------------
	virtual bool Init(void) override = 0;

	//--------------------------------------------------------------------------------
	//  終了処理
	//--------------------------------------------------------------------------------
	virtual void Uninit(void) override = 0;

	//--------------------------------------------------------------------------------
	//  更新処理
	//--------------------------------------------------------------------------------
	virtual void Update(void) override = 0;

	//--------------------------------------------------------------------------------
	//  後更新処理
	//--------------------------------------------------------------------------------
	virtual void LateUpdate(void) override = 0;

	//--------------------------------------------------------------------------------
	//  コライダートリガーの時呼ばれる
	//--------------------------------------------------------------------------------
	virtual void OnTrigger(Collider& self, Collider& other) override = 0;

	//--------------------------------------------------------------------------------
	//  コライダー衝突の時呼ばれる
	//--------------------------------------------------------------------------------
	virtual void OnCollision(CollisionInfo& info) override = 0;

	//--------------------------------------------------------------------------------
	//  ステートの変換
	//--------------------------------------------------------------------------------
	void Change(ActorState* state);

	//--------------------------------------------------------------------------------
	//  アニメーターの取得
	//--------------------------------------------------------------------------------
	Animator& GetAnimator(void) const { return animator_; }

	//--------------------------------------------------------------------------------
	//  パラメーターの取得
	//--------------------------------------------------------------------------------
	auto& GetParamater(void) const { return parameter_; }

	//--------------------------------------------------------------------------------
	//  リジッドボディの取得
	//--------------------------------------------------------------------------------
	Rigidbody3D& GetRigidbody(void) const { return rigidbody_; }

	//--------------------------------------------------------------------------------
	//  移動量の取得
	//--------------------------------------------------------------------------------
	const auto&	GetMovement(void) const { return movement_; }

	//--------------------------------------------------------------------------------
	//  ジャンプフラグの取得
	//--------------------------------------------------------------------------------
	const auto& IsJump(void) const { return is_jump_; }

	//--------------------------------------------------------------------------------
	//  攻撃フラグの取得
	//--------------------------------------------------------------------------------
    const auto& IsAttack(void) const { return is_attack_; }

protected:
	//--------------------------------------------------------------------------------
	//  変数定義
	//--------------------------------------------------------------------------------
	Animator&      animator_;
	ActorState*    state_;
	Rigidbody3D&   rigidbody_;
	ActorParameter parameter_;
	Vector3        movement_;
	bool           is_attack_;
	bool           is_jump_;
};