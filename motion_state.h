//--------------------------------------------------------------------------------
//　motion_state.h
//  classes for motion state
//	モーションステートのクラス
//  用于动作状态机的类
//	Author : 徐文杰(KodFreedom)
//--------------------------------------------------------------------------------
#pragma once
#include "common_setting.h"

//--------------------------------------------------------------------------------
//  forward declaration / 前方宣言 / 前置声明
//--------------------------------------------------------------------------------
class Animator;
class MotionInfo;

//--------------------------------------------------------------------------------
//  motion state super class / モーションステート基底クラス / 动画状态机基类
//--------------------------------------------------------------------------------
class MotionState
{
public:
	//--------------------------------------------------------------------------------
	//  constructor / コンストラクタ / 构造函数
	//  motion_name : 今のモーション名 / 现在的动作名
	//  start_frame : モーションの始めるフレーム / 动作开始的帧
	//--------------------------------------------------------------------------------
	MotionState(const String& motion_name, const int start_frame);
	~MotionState() {};

	//--------------------------------------------------------------------------------
	//  update motion and check if we need change the motion
	//  モーションの更新と切り替えのチェック / 更新动作并检测动作切换
	//  called by animator per frame / アニメーターから呼ばれる / 会被animator呼出
	//  animator : アニメーター
	//--------------------------------------------------------------------------------
	void Update(Animator& animator)
	{
		UpdateMotion(animator);
		ChangeMotion(animator);
	}

	//--------------------------------------------------------------------------------
	//  今のモーション名を返す / 返回现在的动作名
	//  return：const string&
	//--------------------------------------------------------------------------------
	const String& GetCurrentMotionName(void)
	{
		return current_motion_name_; 
	}

protected:
	//--------------------------------------------------------------------------------
	//  モーションの更新 / 更新动作
	//  animator : アニメーター
	//--------------------------------------------------------------------------------
	virtual void UpdateMotion(Animator& animator) = 0;

	//--------------------------------------------------------------------------------
	//  モーションの切り替え / 切换动作
	//  animator : アニメーター
	//--------------------------------------------------------------------------------
	virtual void ChangeMotion(Animator& animator) = 0;

	//--------------------------------------------------------------------------------
	//  今のモーションデータ / 现在的动作的数据
	//--------------------------------------------------------------------------------
	MotionInfo* current_motion_info_;
	
	//--------------------------------------------------------------------------------
	//  今のモーションのフレームカウンタ / 现在的动作的帧计数器
	//--------------------------------------------------------------------------------
	int current_motion_frame_counter_;
	
	//--------------------------------------------------------------------------------
	//  今のモーション名 / 现在的动作的名称
	//--------------------------------------------------------------------------------
	const String current_motion_name_;
};

//--------------------------------------------------------------------------------
//  NormalMotionState
//  update one motion only / 一つのモーションを更新する / 只更新一个动作
//--------------------------------------------------------------------------------
class NormalMotionState : public MotionState
{
public:
	//--------------------------------------------------------------------------------
	//  constructor / コンストラクタ / 构造函数
	//  motion_name : 今のモーション名 / 现在的动作名
	//  start_frame : モーションの始めるフレーム / 动作开始的帧
	//--------------------------------------------------------------------------------
	NormalMotionState(const String& motion_name, const int start_frame)
		: MotionState(motion_name, start_frame) {}
	~NormalMotionState() {}

protected:
	//--------------------------------------------------------------------------------
	//  モーションの更新 / 更新动作
	//  animator : アニメーター
	//--------------------------------------------------------------------------------
	void UpdateMotion(Animator& animator) override;

	//--------------------------------------------------------------------------------
	//  モーションの切り替え / 切换动作
	//  animator : アニメーター
	//--------------------------------------------------------------------------------
	virtual void ChangeMotion(Animator& animator) override = 0;
};

//--------------------------------------------------------------------------------
//  BlendMotionState
//  motionblend / モーションブレンド / 动作切换的补间
//--------------------------------------------------------------------------------
class BlendMotionState : public MotionState
{
public:
	//--------------------------------------------------------------------------------
	//  constructor / コンストラクタ / 构造函数
	//  current_motion_name : 今のモーション名 / 现在的动作名
	//  next_motion_name : 次のモーション名 / 下一个的动作名
	//  start_frame : モーションの始めるフレーム / 动作开始的帧
	//  blend_frame_number : モーションブレンドのフレーム数 / 补间的帧数
	//--------------------------------------------------------------------------------
	BlendMotionState(const String& current_motion_name, const String& next_motion_name, const int current_motion_start_frame, const int blend_frame_number = 10);
	~BlendMotionState() {}

protected:
	//--------------------------------------------------------------------------------
	//  モーションの更新 / 更新动作
	//  animator : アニメーター
	//--------------------------------------------------------------------------------
	void UpdateMotion(Animator& animator) override;

	//--------------------------------------------------------------------------------
	//  モーションの切り替え / 切换动作
	//  animator : アニメーター
	//--------------------------------------------------------------------------------
	void ChangeMotion(Animator& animator) override;

	//--------------------------------------------------------------------------------
	//  次のモーションのフレームカウンタ / 下一个动作的帧计数器
	//--------------------------------------------------------------------------------
	int next_motion_frame_counter_;

	//--------------------------------------------------------------------------------
	//  モーションブレンドのフレームカウンタ / 补间帧的计数器
	//--------------------------------------------------------------------------------
	int	blend_frame_counter_;

	//--------------------------------------------------------------------------------
	//  モーションブレンドのフレーム数 / 补间帧数
	//--------------------------------------------------------------------------------
	const int blend_frame_number_;

	//--------------------------------------------------------------------------------
	//  次のモーションデータ / 下一个的动作的数据
	//--------------------------------------------------------------------------------
	MotionInfo* next_motion_info_;

	//--------------------------------------------------------------------------------
	//  次のモーション名 / 下一个的动作的名称
	//--------------------------------------------------------------------------------
	const String next_motion_name_;
};