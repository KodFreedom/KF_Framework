//--------------------------------------------------------------------------------
//  エネミーエディタ
//　enemy_editor.h
//  Author : Xu Wenjie
//--------------------------------------------------------------------------------
#pragma once
#include "../../../common_setting.h"
#if defined(EDITOR)
#include "../behavior.h"
#include "../../../labels.h"
#include "../../../kf_utility/kf_math.h"
using namespace kodfreedom;

//--------------------------------------------------------------------------------
//  クラス宣言
//--------------------------------------------------------------------------------
class Editor : public Behavior
{
public:
    //--------------------------------------------------------------------------------
    //  constructors and destructors
    //--------------------------------------------------------------------------------
    Editor(GameObject& owner, const String& name) : Behavior(owner, name)
        , is_active_(false), current_language_(kEnglish) {}
    ~Editor() {}

    //--------------------------------------------------------------------------------
    //  初期化
    //--------------------------------------------------------------------------------
    virtual bool Init(void) override = 0;

    //--------------------------------------------------------------------------------
    //  終了処理
    //--------------------------------------------------------------------------------
    virtual void Uninit(void) override = 0;

    //--------------------------------------------------------------------------------
    //  更新処理
    //--------------------------------------------------------------------------------
    virtual void Update(void) override = 0;

    //--------------------------------------------------------------------------------
    //  後更新処理
    //--------------------------------------------------------------------------------
    virtual void LateUpdate(void) override {}

    //--------------------------------------------------------------------------------
    //  アクティブフラグ関数
    //--------------------------------------------------------------------------------
    const bool&  IsActive(void) const { return is_active_; }
    virtual void SetActive(const bool& value) { is_active_ = value; }

    //--------------------------------------------------------------------------------
    //  位置の設定
    //--------------------------------------------------------------------------------
    virtual void SetPosition(const Vector3& position) = 0;

    //--------------------------------------------------------------------------------
    //  ファイルに保存
    //--------------------------------------------------------------------------------
    virtual void SaveAsBinary(const String& name) = 0;

    //--------------------------------------------------------------------------------
    //  情報を読込関数
    //--------------------------------------------------------------------------------
    virtual void LoadFrom(const String& name) = 0;

    //--------------------------------------------------------------------------------
    //  言語の設定
    //--------------------------------------------------------------------------------
    void SetLanguage(const Language& language) { current_language_ = language; }

protected:
    //--------------------------------------------------------------------------------
    //  変数定義
    //--------------------------------------------------------------------------------
    bool     is_active_;
    Language current_language_;
};
#endif // EDITOR