//--------------------------------------------------------------------------------
//　input.h
//  入力ディバイス情報管理
//  Author : 徐文杰(KodFreedom)
//--------------------------------------------------------------------------------
#pragma once
#include <Windows.h>
#include "common_setting.h"

//--------------------------------------------------------------------------------
//  前方宣言
//--------------------------------------------------------------------------------
class KeyboardDirectX;
class MouseDirectX;
class JoystickDirectX;

//--------------------------------------------------------------------------------
//  列挙型定義
//--------------------------------------------------------------------------------
enum Key
{
    kSubmit = 0,
    kCancel,
    kStart,
    kUp,
    kDown,
    kLeft,
    kRight,
    kReset,
    kLock,
    kStrongAttack,
    kSkill,
    kBlock,
    kKeyMax,

    //重ねるキー
    kJump = kSubmit,
    kLightAttack = kCancel,
    kSave = kStart,
    kExtend = kRight,
    kShrink = kLeft,
    kRaise = kUp,
    kReduce = kDown,
};

//--------------------------------------------------------------------------------
//  入力情報クラス
//--------------------------------------------------------------------------------
class Input
{
public:
    //--------------------------------------------------------------------------------
    //  生成処理
    //  return : Input*
    //--------------------------------------------------------------------------------
    static Input* Create(HINSTANCE hinstance, HWND hwnd)
    {
        auto instance = MY_NEW Input;
        instance->Init(hinstance, hwnd);
        return instance;
    }

    //--------------------------------------------------------------------------------
    //  破棄処理
    //--------------------------------------------------------------------------------
    void Release(void) 
    {
        Uninit();
        MY_DELETE this;
    }

    //--------------------------------------------------------------------------------
    //  更新処理
    //--------------------------------------------------------------------------------
    void Update(void);

    //--------------------------------------------------------------------------------
    //  アクセス権の取得
    //--------------------------------------------------------------------------------
    void Acquire(void);

    //--------------------------------------------------------------------------------
    //  アクセス権の放棄
    //--------------------------------------------------------------------------------
    void Unacquire(void);

    //--------------------------------------------------------------------------------
    //  移動の水平量の取得
    //--------------------------------------------------------------------------------
    float MoveHorizontal(void) const { return key_info_.move_horizontal; }

    //--------------------------------------------------------------------------------
    //  移動の垂直量の取得
    //--------------------------------------------------------------------------------
    float MoveVertical(void) const { return key_info_.move_vertical; }

    //--------------------------------------------------------------------------------
    //  回転の水平量の取得
    //--------------------------------------------------------------------------------
    float RotationHorizontal(void) const { return key_info_.rotation_horizontal; }

    //--------------------------------------------------------------------------------
    //  回転の垂直量の取得
    //--------------------------------------------------------------------------------
    float RotationVertical(void) const { return key_info_.rotation_vertical; }

    //--------------------------------------------------------------------------------
    //  ズーム量の取得
    //--------------------------------------------------------------------------------
    float Zoom(void) const { return key_info_.zoom; }

    //--------------------------------------------------------------------------------
    //  プレスの取得
    //--------------------------------------------------------------------------------
    bool GetKeyPress(const Key& key) const { return key_info_.press_state & (1 << static_cast<int>(key)); }

    //--------------------------------------------------------------------------------
    //  トリガーの取得
    //--------------------------------------------------------------------------------
    bool GetKeyTrigger(const Key& key) const { return key_info_.trigger_state & (1 << static_cast<int>(key)); }

    //--------------------------------------------------------------------------------
    //  リリースの取得
    //--------------------------------------------------------------------------------
    bool GetKeyRelease(const Key& key) const { return key_info_.release_state & (1 << static_cast<int>(key)); }

    //--------------------------------------------------------------------------------
    // 何かのキーが押されたフラグ
    //--------------------------------------------------------------------------------
    bool IsPressedAnyKey(void) const;

    //--------------------------------------------------------------------------------
    //  エディタモードの設定
    //--------------------------------------------------------------------------------
    void SetEditorMode(const bool& enable) { is_editor_mode_ = enable; }

    //--------------------------------------------------------------------------------
    //  デモプレイモードの設定
    //--------------------------------------------------------------------------------
    void SetDemoPlayMode(const bool& enable);

    //--------------------------------------------------------------------------------
    //  デモプレイセーブの設定
    //--------------------------------------------------------------------------------
    void SetSaveDemoPlay(const bool& enable);

    //--------------------------------------------------------------------------------
    //  キーボードの取得
    //--------------------------------------------------------------------------------
    const auto GetKeyboard(void) const { return keyboard_; }

    //--------------------------------------------------------------------------------
    //  マウスの取得
    //--------------------------------------------------------------------------------
    const auto GetMouse(void) const { return mouse_; }

    //--------------------------------------------------------------------------------
    //  ジョイスティックの取得
    //--------------------------------------------------------------------------------
    const auto GetJoystick(void) const { return joystick_; }

private:
    //--------------------------------------------------------------------------------
    //  構造体
    //--------------------------------------------------------------------------------
    struct KeyInfo
    {
        float move_horizontal; // 移動の水平量
        float move_vertical; // 移動の垂直量
        float rotation_horizontal; // 回転の水平量
        float rotation_vertical; // 回転の垂直量
        float zoom; // ズームの量
        int   press_state; // プレスの情報
        int   trigger_state; // トリガーの情報
        int   release_state; // リリースの情報
        short end_of_file; // binaryfileの終了フラグ
    };

    //--------------------------------------------------------------------------------
    //  constructors and destructors
    //--------------------------------------------------------------------------------
    Input();
    Input(const Input& value) {}
    Input& operator=(const Input& value) {}
    ~Input() {}

    //--------------------------------------------------------------------------------
    //  初期化処理
    //--------------------------------------------------------------------------------
    bool Init(HINSTANCE hinstance, HWND hwnd);

    //--------------------------------------------------------------------------------
    //  終了処理
    //--------------------------------------------------------------------------------
    void Uninit(void);

    //--------------------------------------------------------------------------------
    //  入力情報の保存
    //--------------------------------------------------------------------------------
    void SaveInputInfo(void);

    //--------------------------------------------------------------------------------
    //  入力情報の読込
    //--------------------------------------------------------------------------------
    void LoadInputInfo(void);

    //--------------------------------------------------------------------------------
    //  入力情報更新更新
    //--------------------------------------------------------------------------------
    void UpdateInputInfo(void);

    //--------------------------------------------------------------------------------
    //  変数定義
    //--------------------------------------------------------------------------------
    KeyboardDirectX* keyboard_ = nullptr; // キーボード
    MouseDirectX*    mouse_ = nullptr; // マウス
    JoystickDirectX* joystick_ = nullptr; // ジョイスティック
    bool             is_editor_mode_ = false; // エディタモーションフラグ
    bool             is_demo_play_ = false;
    bool             is_save_demo_play_ = false;
    KeyInfo          key_info_ = { 0 };
    ofstream         file_for_save_;
    ifstream         file_for_load_;
};